APPNAME = 'lab'
getPartial = function( path )
{
	return '/statics/partials/' + path;
} 

angular
	.module( APPNAME, ['ui.router'])
;

console.group('Good day to you sir!');
console.log("         #              ");
console.log("        ###             ");
console.log("      ### ###           ");
console.log("     ###   ###          ");
console.log("   ###         #######  ");
console.log("  ###       #######     ");
console.log(" #########     ###      ");
console.log("###.            ###     ");
console.log('');
console.log("I'm a freelance creative technologist.");
console.log("You have a project? Let's talk!");
console.log('hello@alexandremasy.com');
console.log('http://linkedin.com/in/amasy/');
console.log('');
console.log("You want more ?");
console.log("http://github.com/ahsx");
console.log("http://twitter.com/beg_sleep");
console.log('');
console.groupEnd('Good day to you sir!')
"use strict";

angular
	.module( APPNAME )
	.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider) {

		// $urlRouterProvider.otherwise("/options");

		if ( window.history && window.history.pushState )
			$locationProvider.html5Mode(true);

		$stateProvider
			.state('options', {
				name: 'options',
				url: '/options',
				templateUrl: '/statics/partials/views/optionsbar/options.html'
			})

			.state('about', {
				name: 'about',
				url: '/about',
				templateUrl: '/statics/partials/views/optionsbar/about.html'
			})
	}]);
angular
	.module( APPNAME )
	.controller('AppController', ['$rootScope', '$scope', function($rootScope, $scope)
	{
		$rootScope.open = false;
		$rootScope.openSide = 'options';
		$rootScope.options = {};
		$rootScope.options.themes = [
			{
				name:"Original",
				colors:["#563b8a","#a5468f","#f17e93","#eb3549"]
			},
			{
				name:"Floral",
				colors:["#DD577A","#FFF0CF","#FE5A27","#49AEC0"]
			},
			{
				name:"The Coasters",
				colors:["#FA9F29","#15CAB1","#0A633D","#2F3030"]
			}
		];
		$rootScope.options.theme = $rootScope.options.themes[0];

		$scope.saveToClipboard = function( text )
		{
			window.prompt("Copy to clipboard: Ctrl+C, Enter", text);
		}
	}]);
angular
	.module( APPNAME )
	.controller('ScreenplayController', ['$scope', '$rootScope', '$element',  '$window', 'CanvasService', function($scope, $rootScope, $element, $window, CanvasService)
	{
		CanvasService.init( $element.find('canvas'), jQuery($element).find('.container'), $window, $scope.options.theme );
		$rootScope.saveCanvas = function()
		{
			$rootScope.saveURL = CanvasService.getURL();
			window.location.href = $rootScope.saveURL;
		}

		$scope.$watchCollection( 'options', function(newVal, oldVal)
		{
			CanvasService.update( newVal );
		})
	}])
;
angular
	.module( APPNAME )
	.directive('fade', [function($animate)
	{
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: true, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			// templateUrl: '',
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('description', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
				$scope.title = $attrs.title || 'Warning: untitled application';
				$scope.subtitle = $attrs.subtitle || '';
				$scope.sources = $attrs.sources || 'Warning: no source url defined';
				$scope.demo = $attrs.demo || 'Warning: no url demo defined';
				$scope.keywords = $attrs.keywords || 'Warning, no, keywords';
				$scope.image = $attrs.image || 'Warning: no image defined';
			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			// templateUrl: getPartial('directives/description.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, transclude)
			// { 
			// 	return {
			// 		pre: function($scope)
			// 		{
			// 			transclude($scope, function(clone)
			// 			{
			// 				$scope.description = clone[0].textContent || 'Warning: no application description';
			// 			})
			// 		}
			// 	}
			// },
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('dropdown', [function()
	{
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {
				title: '@',
				source: '=',
				value: '=model'
			}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/dropdown.html'),
			// replace: true,
			transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			// link: function($scope, iElm, iAttrs, controller) {
			// }
		};
	}]);
angular
	.module( APPNAME )
	.directive('icon', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
				$scope.label = $attrs.label;
				$scope.href = '#' + $attrs.label;
				$scope.width = $attrs.width || 32;
				$scope.height = $attrs.height || 32;

			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/icon-directive.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
/**
 *	Range directive
 *	
 *	Display a range component. 
 *
 *	Parameters:
 * 		- min {Number} Minimun value allowed
 * 		- max {Number} Maximum value allowed
 * 		- title {String} Title displayed in the label
 * 		- step {Number}	Each time we click on + and - how much do we add or retract
 * 		- precision {Number} What is the precision of the display
 * 		- value {Number} The initial value
 * 		- movel {String} Where do we store the value (which scope variable)
 *
 *	@author Alexandre Masy
 *	@version 1.2
 **/
angular
	.module( APPNAME )
	.directive('range', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {
				min: 		'@',
				max: 		'@',
				title: 		'@',
				step: 		'@',
				precision: 	'@',
				value: 		'=model'
			}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: '^', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/range.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, $element, $attrs, controller) 
			{
				$scope.value = $attrs.value || 0;
				$scope.step = parseFloat($attrs.step) || 1;
				$scope.precision = $attrs.precision || 1;

				$scope.plus = function()
				{
					var n = parseFloat($scope.value) + $scope.step;
					$scope.value = Math.min( n, $attrs.max );
				}

				$scope.minus = function()
				{
					var n = parseFloat($scope.value) - $scope.step;
					$scope.value = Math.max( n, $attrs.min );
				}
			}
		};
	}]);
"use strict";

/**
* SVG Collection directive
*
* Description
*/
angular
	.module( APPNAME )
	.directive('sprite', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/svg-sprite.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('switch', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {
				labelon: 	'@',
				labeloff: 	'@',
				on: 		'@',
				title: 		'@',
				value: 		"=model"
			}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/switch.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				$scope.value = iAttrs.on === 'true';
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('toolbar', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// controller: 'ToolbarController',
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/toolbar.html'),
			replace: true,
			transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				// controller.init(iElm)	
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('toolbaritem', ['$rootScope', function($rootScope){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: true, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
				$scope.active = false;
				$scope.title = $attrs.title;
				$scope.href = $attrs.href;
				$scope.icon = $attrs.icon;
				$scope.side = $attrs.href.substr(1);

				$rootScope.$watch('openSlide', function(newVal, oldVal)
				{
					$scope.active = $rootScope.openSlide == $scope.side;
				});

				$scope.itemClick = function( $event, side )
				{
					$event.preventDefault();

					if ( $scope.side == $scope.openSlide )
					{
						$rootScope.open = !$rootScope.open;
					}
					else
					{
						$rootScope.open = true;
						$rootScope.openSlide = $scope.side;
					}

					if ( !$rootScope.open )
						$rootScope.openSlide = null;
				}
			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/toolbar-item.html'),
			replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module(APPNAME)
	.service('CanvasService', ['Utils', function(Utils)
	{
		/**
		 *	Return the url of the image of the canvas
		 *
		 *	@return {String}
		 **/
		this.getURL = function()
		{
			return this.canvas[0].toDataURL('image/png').replace("image/png", "image/octet-stream");;
		};

		/**
		 *	Define the size of the canvas
		 *
		 *	@param width Number %
		 *	@param height Number %
		 **/	
		this.setSize = function( width, height )
		{
			if ( this.width == width && this.height == height )
				return;

			console.log('setSize: %sx%s', width, height);

			this.width = width;
			this.height = height;

			var offset = 70;
			this.pixelWidth = this.windowWidth * (width*.01) - offset;
			this.pixelHeight = this.windowHeight * (height*.01);

			// container
			this.container.css({
				width: "calc("+width+"% - "+offset+"px)",
				height: height +'%'
			});

			// canvas
			this.canvas.attr({
				width: this.pixelWidth,
				height: this.pixelHeight
			});

			// layers
			var n = this.layers.length;
			var m = this.layers.length;
			var h;
			while( n-- )
			{
				h = (this.pixelHeight/(m+1))*(m-n) |0;
				this.layers[n].setSize( this.pixelWidth, h );
			}

			// draw
			this.draw();
		};

		/** 
		 *	Define the thickness
		 *
		 *	@param value int
		 **/
		this.setThickness = function( value )
		{
			if ( this.thickness == value )
				return;

			this.thickness = value;
			var n = this.layers.length;
			while( n-- )
			{
				this.layers[n].setThickness( this.thickness );
			}

			this.draw();
		};

		/**
		 *	Define the amplitude
		 *
		 *	@param value Number
		 **/
		this.setAmplitude = function ( value )
		{
			if ( this.amplitude == value )
				return;

			this.amplitude = value;
			var n = this.layers.length;
			while( n-- )
			{
				this.layers[n].setAmplitude( value );
			}

			this.draw();
		};

		/** 
		 *	Define the frequency 
		 *
		 *	@param value {Number}
		 **/
		this.setFrequency = function( value )
		{
			if ( this.frequency == value )
				return;

			this.frequency = value;
			var n = this.layers.length;
			while( n-- )
			{
				this.layers[n].setFrequency( value );
			}

			this.draw();
		}

		this.setTheme = function( value )
		{
			if ( this.theme == value )
				return;

			this.theme = value;
			var n = this.layers.length;
			while( n-- )
			{
				this.layers[n].setColor( this.theme.colors[n] );
			}
		}

		/**
		 *	Init the canvas
		 *
		 *	@param canvas JQueryElement
		 *	@param container JQueryElement
		 *	@param value Window
		 *	@param theme Object
		 **/
		this.init = function( canvas, container, window, theme )
		{
			this.canvas = jQuery(canvas);
			this.context = canvas[0].getContext('2d');
			this.stage = new createjs.Stage( canvas[0] );
			createjs.Ticker.addEventListener("tick", onTickHandler.bind(this));

			this.container = container;

			this.window = jQuery(window).on('resize', onResizeHandler.bind(this));

			this.theme = theme;

			this.refresh();
			this.create();
		};

		/**
		 *	Refresh the value // on resize window
		 **/
		this.refresh = function()
		{
			this.windowWidth = this.window.width();
			this.windowHeight = this.window.height();
		};

		/** 
		 *	Create the objects
		 **/
		this.create = function()
		{
			this.layers = [
				addLayer.call( this, this.theme.colors[0], 'first' ),
				addLayer.call( this, this.theme.colors[1], 'second' ),
				addLayer.call( this, this.theme.colors[2], 'third' ),
				addLayer.call( this, this.theme.colors[3], 'fours' )
			];
		};

		/**
		 *	The value have change, needs to adapt to the new values
		 *	
		 *	@param options Object
		 **/
		this.update = function( options )
		{
			this.setThickness( options.thickness );
			this.setAmplitude( options.amplitude );
			this.setFrequency( options.frequency );
			this.setSize( options.stageWidth, options.stageHeight );
			this.setTheme( options.theme );
		};		

		/**
		 *	Called every frame
		 **/
		this.draw = function()
		{
			var n = this.layers.length;
			while( n-- )
			{
				this.layers[n]
					.draw()
			}
		};

		/**
		 *	Resize handler
		 *
		 *	@param event
		 **/
		function onResizeHandler(event)
		{
			this.refresh();
			this.width !== null && this.setSize( this.width, this.height );
		}

		/**
		 *	Tick handler
		 *	
		 *	@param event TickEvent
		 **/
		function onTickHandler(event)
		{
			this.draw();
			this.stage.update();
		}

		/**
		 *	Add a new layer
		 *
		 *	@param color Number
		 *	@param name String
		 *	@return Layer
		 **/
		function addLayer( color, name )
		{
			var l = new Layer( color, name );
			l.setUtils( Utils );
			this.stage.addChild( l.getDisplayObject() );

			return l;
		}

		

	}]);
(function(window) {
	'use strict';

	/**
	 *	Layer
	 *
	 *	@param color int
	 **/
	function Layer( color, name )
	{
		this.color = color;
		this.name = name;
		this.shape = new createjs.Shape();
		this.list = [];
	}

	/** 
	 *	Prototype
	 **/
	var p = Layer.prototype;

	/**
	 *	Return the display object
	 *	
	 *	@return DisplayObject
	 **/
	p.getDisplayObject = function()
	{
		return this.shape;
	}

	/**
	 *	Define the color of the layer
	 *
	 *	@param value {Number}
	 **/
	p.setColor = function( value )
	{
		if ( this.color == value )
			return;

		TweenMax.to( this, 1, {colorProps:{color: value}});
		// this.color = value;
	}

	/**
	 *	Define the utility methods
	 *
	 *	@param utils Utils
	 **/
	p.setUtils = function( utils )
	{
		this.utils = utils;
	}

	/**
	 *	Define the size of the layer
	 *
	 *	@param width Number
	 *	@param height Number
	 *	@return Layer
	 **/
	p.setSize = function( width, height )
	{
		this.width = width;
		this.height = height;
		this.compute();

		return this;
	}

	/**
	 *	Define the thickness
	 *		
	 *	@param value Number
	 *	@return Layer
	 **/
	p.setThickness = function( value )
	{
		this.thickness = value | 0;
		this.compute();

		return this;
	}

	/**
	 *	Define the amplitude
	 *
	 *	@param value {Number}
	 *	@return Layer
	 **/
	p.setAmplitude = function( value )
	{
		this.amplitude = value | 0;
		this.compute();

		return this;
	}

	/**
	 *	Define the frequency
	 *
	 *	@param value {Number}
	 *	@return Layer
	 **/
	p.setFrequency = function( value )
	{
		this.frequency = value;
		this.compute();

		return this;
	}

	/**
	 *	Compute the values
	 *
	 *	@return Layer
	 **/
	p.compute = function()
	{
		var length = (this.width / this.thickness) | 0
		var i = -1;
		var r, x, y, h;

		var phase = this.utils.range(0, 1000); // phase angle
		var originx = 0;
		var originy = 0;
		var n;

		while( i++ < length )
		{
			r = this.list[i];
			x = i * this.thickness;
			y = Math.sin(this.frequency * (x + phase)) * this.amplitude + originy;
			h = this.height + y;
			if ( i & 1 )
				h -= this.utils.range(this.thickness>>1, this.thickness<<1);

			// creation
			if (!r)
			{
				r = new createjs.Rectangle(x, 0, this.thickness, 0);
				this.list.push( r );	
			}

			TweenMax.killTweensOf(r);
			TweenMax.to( 
				r, 
				this.utils.range(.5, 4), 
				{
					width: this.thickness, 
					height: h, 
					ease: Strong.easeInOut
				}
			);

			r.x = x;
		}

		// hide the rest
		length = this.list.length - length;
		while (i++ < length )
		{
			r = this.list[i];

			TweenMax.to(
				r,
				.3,
				{
					width: this.thickness,
					height: 0,
					ease: Strong.easeInOut
				}
			)
		}

		return this;
	}

	/**
	 *	Draw the layer
	 *
	 *	@return Layer
	 **/
	p.draw = function()
	{
		this.shape.graphics.clear();

		var n = this.list.length;
		var r;
		var a;
		while (n--)
		{
			r = this.list[n];
			a = this.thickness>>1;

			if ( n & 1 )
			{
				this.shape.graphics
									.beginFill( this.color )
									.moveTo( r.x, r.y )
									.lineTo( r.x, r.y + r.height)
									.arc( r.x + a, r.height, a+1, Math.PI, 0)
									.lineTo( r.x+this.thickness, r.y )
									.lineTo( r.x, r.y )
									.endFill()
				;
			}
			else
			{

				this.shape.graphics
									.beginFill( this.color )
									.moveTo( r.x, r.y )
									.lineTo( r.x, r.y + r.height)
									.arc( r.x+a, r.height, a, 0, Math.PI)
									.lineTo( r.x + this.thickness, r.y + r.height )
									.lineTo( r.x + this.thickness, r.y )
									.endFill()
									.closePath()
				;

			}

		}

		return this;
	}

	

	window.Layer = Layer;
})(window);
angular
	.module( APPNAME )
	.service('Utils', [function(){
		
		/**
		 *	Return a random value between min and max
		 *
		 *	@param min {Number}
		 *	@param max {Number}
		 *	@return {Number}
		 **/
		this.range = function( min, max )
		{
			return Math.floor(Math.random() * (max - min + 1) + min);
		}

		/**
		 *	Convert a degree angle to a radian
		 *
		 *	@param value {Number}
		 *	@return {Number}
		 **/
		this.toRadian = function( value )
		{
			return value * (Math.PI/180);
		}
	}])	
